<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MEwAAAAASUVORK5CYII=
</value>
  </data>
</root>